security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    enable_authenticator_manager: true
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'md5'
    role_hierarchy:
        ROLE_POWER_USER:    [ROLE_POWER_USER, ROLE_REGULAR_USER]
        ROLE_REGULAR_USER:  ROLE_REGULAR_USER
        ROLE_MODERATOR: [ROLE_REGULAR_USER, ROLE_POWER_USER, ROLE_MODERATOR]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_REGULAR_USER, ROLE_POWER_USER, ROLE_MODERATOR, ROLE_ALLOWED_TO_SWITCH]
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        nucleos_userbundle:
            id: nucleos_user.user_provider.username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/
            user_checker: Nucleos\UserBundle\Security\UserChecker
            form_login:
                provider: nucleos_userbundle
                default_target_path: app_home
                use_referer: true
            # In this example, we have 3 authenticators, one of our sf application
            # and 2 social authenticators, therefore we use LoginFormAuthenticator as the entry point

                # Set as entry point the default authenticator of the application (LoginFormAuthenticator) to fix the issue

            logout:       true
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/story, roles: [ROLE_POWER_USER, ROLE_MODERATOR, ROLE_ADMIN] }
        - { path: ^/scenes, roles: [ROLE_POWER_USER, ROLE_MODERATOR, ROLE_ADMIN] }
        - { path: ^/podcasts, roles: [ROLE_POWER_USER, ROLE_MODERATOR, ROLE_ADMIN] }
        - { path: ^/admin, roles: [ROLE_ADMIN] }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
